#!/usr/bin/env python
"""
Expand and dump coil files to standard output
"""

import sys
from optparse import OptionParser
from coil.parser import Parser


expand_types = frozenset(['strings'])
compat_types = ('0.2.2',)


class AttrError(Exception):
    "poorly defined path-key/value pair for coil"
    pass


def parse_attrs(attrs, allow_path):
    """split foo=bar (or foo:bar) attributes from the command line into
    a list of key-value pairs"""
    parsed = []

    if attrs:
        for attr in attrs:
            if ':' in attr:
                key, value = attr.split(':', 1)
            elif '=' in attr:
                key, value = attr.split('=', 1)
            else:
                raise AttrError("Invalid key:value pair. '%s'" % attr)

            if not allow_path and '.' in key:
                raise AttrError("Character '.' not allowed in '%s'" % key)

            parsed.append((key, value))

    return parsed

def parse_expand(option, opt, value, parser):
    operation = parser.values.expand.update
    if value[0] == '-':
        value = value[1:]
        operation = parser.values.expand.difference_update
    if value == "all":
        operation(expand_types)
    elif value in expand_types:
        operation(set([value]))
    else:
        parser.error("Invalid --expand type: %s" % value)

def parse_compat(option, opt, value, parser):
    if value in ("0.2", "0.2.2"):
        parse_expand(None, None, "-strings", parser)
        parser.values.permissive = True
    else:
        parser.error("Invalid --compat: %s" % value)

def parse_options():
    """Command-line option parsing"""
    parser = OptionParser("Usage: %prog [options] file1.coil [coil2.coil...]")

    parser.add_option("-d", "--default", dest="defaults", action="append",
            help="A key:value pair to use as a default value")
    parser.add_option("-a", "--attribute", dest="attrs", action="append",
            help="A path.key:value pair to add add to the coil")
    parser.add_option("-b", "--block", dest="block", action="store",
            help="Show the subbranch of the coil underneath a given path.key")
    parser.add_option("-f", "--flatten", dest="flatten", action="store_true",
            help="Show each setting on a separate, fully-qualified line, "
                      "rather than in {} blocks")
    parser.add_option("--expand", default=set(expand_types),
            action="callback", callback=parse_expand, type='str',
            help="Control what types of expansion are performed. "
                 "Prefix types with - to remove them. Default is "
                 "all. Valid types are: all, %s" %
                 ", ".join(sorted(expand_types)))
    parser.add_option("--permissive", action="store_true",
            help="Ignore some minor errors during parsing.")
    parser.add_option("--compat",
            action="callback", callback=parse_compat, type='str',
            help="Maintain compatibility with previous coil versions. "
                 "Valid values are: 0.2")

    options, args = parser.parse_args()

    try:
        options.defaults = parse_attrs(options.defaults, False)
    except AttrError, ex:
        parser.error("Invalid --default: %s" % ex)

    try:
        options.attrs = parse_attrs(options.attrs, True)
    except AttrError, ex:
        parser.error("Invalid --attribute: %s" % ex)

    if not args:
        # Default to stdin
        args = ["-"]

    return options, args


def main():
    options, coil_files = parse_options()
    ignore_types = expand_types.difference(options.expand)

    for coil_file in coil_files:
        try:
            if coil_file == "-":
                coil_fd = sys.stdin
            else:
                coil_fd = open(coil_file)

            parser = Parser(coil_fd, coil_file,
                    expand=False, permissive=options.permissive)
            parsed = parser.root()
            coil_fd.close()

            for key, val in options.attrs:
                parsed[key] = val

            parsed.expand(
                    defaults=dict(options.defaults),
                    ignore_types=ignore_types)

            if options.block:
                parsed = parsed[options.block]

            if options.flatten:
                print parsed.flatten()
            else:
                print parsed.string()
        except Exception, ex:
            sys.stderr.write("Error in %s: %s\n" % (coil_file, ex))
            sys.exit(1)


if __name__ == '__main__':
    main()
